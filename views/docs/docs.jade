:markdown

  ## Characteristics
  
  - HTML5 y CSS3
  - Responsive or Adaptive based on need. 
  - Configurable. 
  - Built on Less so you can develop on Less. 
  - Without pre defined classes
  - Ordained and Extendible
  - No Junk Codes
  - Easy to learn 
  - It includes a JS library for forms, modales, sliders, tooltips tabs and more
  - The CSS base compilator weighs only 7.4k

  ## JavaScript Resources

  - [jQuery](http://jquery.com/)
  - [jQuery tools](http://jquerytools.org) (incluye: Tabs, Tooltip, Form Tools, Toolbox.)
  - [flexSlider2](http://flexslider.woothemes.com/)
  - [html5shim](http://code.google.com/p/html5shim/)
  - [less](http://lesscss.org/)
  - [jade](http://jade-lang.com)

  ## Less Resources

  - Surround Variables
      - Colors 
      - Sources
      - Path to the Content Directory multimedia (images, letter case, etc.) 
  - [Normalize](http://git.io/normalize).
  - Letter Case included through Google fonts.
  - Horizontal o Vertical form definition.
  - Pack to generate Recurrent Codes. This is like executing functions in CSS.
      - [semantic.gs](http://semantic.gs/) grid.
      - [LESS Prefixer](http://lessprefixer.com/) CSS3.
      - Buttons.
      - [Font Awesome](http://fortawesome.github.io/Font-Awesome/) icons.
  - Pre defined Elements.
      - Gallery.
      - Navigation.
      - Image Rotator.
  - Layout
      - General styles with individual files for each media Query.

  ## Installation

  **Attention: To be able to use this server, you need to have [nodejs](http://nodejs.org) installed.**


  ##### Dashboard:

      git clone https://github.com/tiko2015/snippets.git
      cd snippets
      npm install
      node server

  ##### Navigator: 

      http://127.0.0.1:3000

  Run this application on heroku.com:

      heroku apps:create example
      git push heroku master
      heroku open

  See it working on [heroku](http://snippets-ws.herokuapp.com)

  If you need help, [click on this link](https://devcenter.heroku.com/articles/getting-started-with-nodejs)
  
  ## How does it work?

  Being this a program to create templates, when the node server is started, it sits and waits for file requests located at the public directory.

  If the requested files have the .html extension, the Server searches its correlation in the views folder, in this specific case with the .html.jade extension.
  
  If this one already exists, it looks for the same files in the models folder using the extension .html.json, it will compile and return the requested html.
  
  At the same time, it creates the requested file in Public folder.
  
  If the file would not exist, the server would try to find it in the Public folder, and if still not there, it will then show a 404 error. 
  
  If using Less, you do the same procedure.
  
  Meaning that the call to style.css would compile less/style.css.less with all its includes and it will return a page of unique styles.
  
  > **NOTE:** Idle sites could be generated if less & views folders are not included in the production Server.


  
  ## How to work with Less in Snippets

  Please know that this tool should be helpful in implementing your project.

  Therefore, using a structure like Shippets should not intimidate you. You should be able to adapt and customize this tool it to your needs.

  To begin utilizing Shippets, you need to know the structure of the directories.

  Although you will be able to change it to fit your project requirements and needs, you need to understand the structure to be able to modify it.

  Bear in mind that shippets uses a great amount of code shortcuts to make your project easier.

  The goal here is to make the development 

  Easier and generate one CSS for your site.

  #### Structure of Directories:
  <div class="folder">
  - **models** (data files in json format)
  - **views** (jade files)
      - **_layouts** 
        - **includes**
        - **elements**
  - **less** (here is where you find these files.  less, is not necessary for production)
      - **lib**
          - **01core** (letter case, reset, mixins and other general configurations)
          - **02extends** (less libraries to help you  code creating)
          - **03elements** (specific site element definition)
      - **themes**
          - **default**
          - **docs**
          - **examples**
  - **public**
      - **js** (your scripts)
          - **lib** (tirad party javascript resources)
      - **media** (binary files)
          - **fonts** (lettercase to be utilized)
          - **img** (image files that are a part of the design)
          - **upload** (content files)
  </div>
  #### Where to begin:

  Start by opening the *'less/style.less'* file.

  Here you will find all the files needed for your task, and in their loading sequence.

  For reading purposes, all directories are numbered. Nevertheless, each task has different requirements, qnd this sequence can be altered based on your needs. 

  To remove files, you don’t need to erase them. You can comment them same as in *'reset.less'*:

      ...
      //@import "01core/reset.less";
      @import "01core/normalize.less";
      ...
      
  Another file where we are committed to working extensively is *04layout/all.less*.

  Here you will find lines that shape the HTML. i.e, *'index.html'*

  If you are not familiar with **less** yet, this is a good time to [take a tour](http://lesscss.org/).

  When beginning a new project or task, you can delete all styles and start utilizing *'clean.html'*. 
  The only definitions in this file are the calls are the calls to the scripts needed for **snippets** development.


  #### Mixins User:

  One of the biggest advantages of creating CSS with less is the possibility of using mixins.

  This allows us to define a series of attributes for one element.  Further, you can add variables.
  
  Let’s check an example of our file *'lib/01core/mixins.less'*

      .size (@width: 400, @height: 200) {
        width: @width * 1px;
        height: @height * 1px;
      }
      
  CUsing these lines we can generate an abreviated code to define elements of a fixed size. To do a div with a **class .box**, we could write it like this:

      .box {
        .size(60,60);
      }
      
  And the result of the compiled CSS would be as follows:

      .box {
        width: 60px;
        height: 60px;
      }


  #### Using Extends:

  Up to know, we have four (4) defined extensions, buttons, css3, grid and Font-Awesome.

  Buttons is an extension that allows you to create botonos for links and inputs for forms.

  It also allows you define the background color and size.
  
  Check it out, modify it and use it as you please!

  With css3.less you can make the properties  of the new version compatible so that you don’t have to write prefixes for every navigator.

  See how to use it in [LESS Prefixer](http://lessprefixer.com/) 

  As a table system, **snippets** adopts the 12 column method. Learn how to use [semantic.gs](http://semantic.gs/) which is very well explained and documented.

  [Font Awesome](http://fortawesome.github.io/Font-Awesome/) is a family of standard icons to help you graph buttons, links, alerts, etc.

  #### Elements, layouts and sources

  In elements you will find structures that are ordinarily used. Check the directory views/_layouts/elements you will find other code shorcuts that are compatible.

  In layouts we define the general rules to responsive. 

  Themes is where you will find all the particular styles for your task.


  #### Reccommendations

  Use less from a local Server. Installing it in any operating system is a simple task.

  ## Jade

  While we are preparing the documentation, you can go to [documentación](http://jade-lang.com/reference/) of [jade](http://jade-lang.com/).
